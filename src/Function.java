package src;

import java.awt.*;
import java.io.CharArrayReader;
import java.lang.Math;

import java.util.ArrayList;
import java.util.Stack;

/**
 * A mathematical function generated by user input.
 */
public class Function {

    private String functionString;
    private ArrayList<Coordinate> functionNodes;

    public Function(String functionString, int nodeNumber) {
        this.functionString = functionString;
        //parseFunctionString(functionString);
        createFunctionTree(nodeNumber);
    }


    // parses a function and converts into RPN using the Shunting-Yard algorithm
    private void parseFunctionString(String functionString){
        int len = functionString.length();
        ArrayList<Character> output = new ArrayList<Character>();
        Stack<Character> opStack = new Stack<Character>();
        int i = 0;
        while (i < len){
            char token = functionString.charAt(i);
            if (token in )
        }
    }

    private void createFunctionTree(int nodeNumber) {

        functionNodes = new ArrayList<Coordinate>();
        int count = 0;
        for(int i = -Frame.WIDTH/2; count < nodeNumber*10; i = i + Frame.WIDTH/nodeNumber){
            double x = (double)(i)/10.0;
            double y = 2.0*(x*x)*Math.sin((x*x))/10.0;
            functionNodes.add(new Coordinate(i, (int)(y)));
            count ++;
        }

    }

    public void paintFunction(Graphics2D g) {
        for(int i = 0; i < functionNodes.size()-2; i++){
            g.fillOval(functionNodes.get(i).getDisplayX(),functionNodes.get(i).getY(),1,1);
            g.setColor(Color.black);
            g.drawLine(functionNodes.get(i).getDisplayX(),functionNodes.get(i).getDisplayY(),functionNodes.get(i+1).getDisplayX(),functionNodes.get(i+1).getDisplayY());
        }
    }
    
}